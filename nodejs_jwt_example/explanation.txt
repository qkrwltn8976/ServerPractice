** JWT 토큰 기반 인증에 대한 소개
토큰 기반 인증: 유저들의 인증작업 처리하기에 좋은 방법
1) Stateless 서버
: 상태를 유지하지 않고 클라이언트 측에서 들어오는 요청만으로 작업 처리하기에서버의 확장성 높아짐
(Stateful 서버 = 클라이언트에게서 요청을 받을 때마다 클라이언트의 상태를 계속해서 유지하고 정보를 서비스 제공에 이용)
2) 모바일 애플리케이션에 적합
모바일 애플리케이션에 쿠키와 같은 인증 시스템은 이상적이지 않음
3) 인증정보를 다른 애플리케이션으로 전달
OAuth: 페이스북, 구글 같은 소셜 계정들을 이용해 다른 서비스에서도 로그인 가능
4) 보안
: 토큰 기반 인증 시스템을 사용하여 애플리케이션 보안을 높임
단, 무조건 해킹의 위험에서 벗어나지 않음

서버 기반 인증의 문제점
1) 세션
: 유저가 인증할 때 세션(기록)을 서버에 저장하면 램 과부하 발생
데이터베이스의 성능에 무리 줌
2) 확장성
: 서버의 확장(= 더 많은 트래픽을 감당하기 위해 여러 개의 프로세스를 돌리거나 여러 대의 서버 컴퓨터를 추가하는 것)
세션을 사용하면서 분산된 시스템을 설계하는 것은 복잡
3) CORS(Cross-Origin Resource Sharing)
웹 애플리케이션에서 세션 관리 시 자주 사용되는 쿠키는 단일 도메인 및 서브 도메인에서만 작동하도록 설계
쿠키를 여러 도메인에서 관리하는 것은 번거로움

토큰 기반 시스템의 작동원리
1) 유저가 아이디와 비밀번호로 로그인
2) 서버 측에서 해당 계정정보를 검증
3) 계정정보가 정확하다면 서버측에서 유저에게 signed 토큰을 발급
(signed = signature를 지니고 있다)
4) 클라이언트 측에서 전달받은 토큰을 저장해두고 서버에 요청할 때마다 토큰을 함께 서버에 전달
5) 서버는 토큰 검증 후 요청에 응답


**JWT(JSON Web Token)
: 웹 표준으로 두 개체에서 JSON객체를 사용해 가볍고 자가수용적인 방식으로 정보를 안정성 있게 전달
- 많은 프로그래밍 언어에서 지원
- 자가 수용적 : 필요한 모든 정보를 자체적으로 지니고 있음
- 쉽게 전달 가능 : HTTP의 헤더, URL 파라미터로 전달

JWT 사용되는 경우
- 회원인증: 서버가 클라이언트에게서 요청 받을 때마다 세션 유효 확인 검증 후 작업 처리하기에서버측에서는 유저의 세션을 유지할 필요 없음
- 정보교류: 두 개체 사이에서 안정성있게 정보 교환, sign이 되어 있어 정보 검증 가능

JWT 형식
aaaaaa.bbbbbb.cccccc
헤더(header).내용(payload).서명(signature)

